Inicia o arquivo 'package.json' e adciona o express para iniciar o projeto
  > yarn init
  > yarn add express

Nodemon e sucrase
  # nodemon - reinica o servidor automaticamente ao salvar o arquivo
  # sucrase - permite ao node utilizar as novas features do javascript
  1 - yarn add sucrase nodemon -D
  2 - No arquivo 'package.json' adiciona
    "scripts": {
      "dev": "nodemon src/server.js"
    },
  3 - Cria um arquivo de configuração 'nodemon.json'
    {
      "execMap": {
        "js": "sucrase-node"
      }
    }
  4 - Roda o servidor
    > yarn dev


Sequelize e Postgres (Utilizando Docker)
  # Bilbioteca ORM utilizada para abstrair o trabalho com o banco de dados
  1 - Configura o banco de dados Postgre utilizando o Docker
    > docker run --name database -e POSTGRES_PASSWORD=docker -p 5432:5432 -d postgres
  2 - Baixar e instalar o App "PostBird" para utilizar o Postgre com interface gráfica
  3 - Inicia o container com o database
    > docker start database

  Comandos Sequelize no Docker
  # Adiciona as dependencias para facilitar a utilização na linha de comando
    > yarn add sequelize
    > yarn add sequelize-cli
  # Inicia a migration de usuarios
    > yarn sequelize migration:create --name=create-users
  # Roda a migração
    > yarn sequelize db:migrate
  # Desfaz a ultima migração
    > yarn sequelize db:migrate:undo
  # Desfaz todas as migrações
    > yarn sequelize db:migrate:undo:all



ESlint, Prettier e EditorConfig
  1 - Adiciona o 'eslint' como depedencia de desenvolvimento
    > yarn add eslint -D
  2 - Inicializa o arquivo de configuração do eslint
    > yarn eslint --init
  3 - Seleciona as seguintes opções que vão aparecer no terminal
    How would you like to use ESLint?
      To check syntax only
      To check syntax and find problems
    ❯ To check syntax, find problems, and enforce code style

    What type of modules does your project use? (Use arrow keys)
    ❯ JavaScript modules (import/export)
      CommonJS (require/exports)
      None of these

    Which framework does your project u
    se? (Use arrow keys)
      React
      Vue.js
    ❯ None of these

    Where does your code run?
      ◯ Browser
    ❯ ◉ Node

    How would you like to define a style for your project?
    (Use arrow keys)
    ❯ Use a popular style guide
      Answer questions about your style
      Inspect your JavaScript file(s)

    Which style guide do you want to follow? (Use arrow keys)
    ❯ Airbnb (https://github.com/airbnb/javascript)
      Standard (https://github.com/standard/standard)
      Google (https://github.com/google/eslint-config-google)

    What format do you want your config file to be in? (Use arrow keys)
    ❯ JavaScript
      YAML
      JSON

  4 - A instalação é feita por padrão utilizando o 'npm', o que gera
      um arquivo 'package-lock.json', mas como estamos trabalhando
      com o yarn, removemos este arquivo e rodamos o yarn para realizar
      o mapeamento das novas dependencias no 'yarn.lock'
      > yarn

  5 - Instala a extenção ESlint na IDE
  6 - No arquivo 'settings.json' do VSCode adicione
    "eslint.autoFixOnSave": true,
    "eslint.validate": [
      {
        "language": "javascript",
        "autoFix": true
      },
      {
        "language": "javascriptreact",
        "autoFix": true
      }
    ],

  7 - Adiciona as bibliotecas para integração do ESlint com o Prettier
    > yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

  8 - Configuramos o arquivo '.eslint.js'
    module.exports = {
      env: {
        es6: true,
        node: true,
      },
      extends: ['airbnb-base', 'prettier'],
      plugins: ['prettier'],
      globals: {
        Atomics: 'readonly',
        SharedArrayBuffer: 'readonly',
      },
      parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
      },
      rules: {
        "prettier/prettier": "error",
        "class-methods-use-this": "off",
        "no-param-reassign": "off",
        "camelcase": "off",
        "no-unused-vars": ["error", {"argsIgnorePattern": "next"}],
      }
    };

    9 - Cria um arquivo '.prettierrc' para resolver problema de regras
        duplicadas entre o ESlint e o Prettier
      {
        "singleQuote": true,
        "trailingComma": "es5"
      }

    10 - Dá um fix em todos os arquivos '.js' na pasta 'src'
      > yarn eslint --fix src --ext .js

    11 - Instala o plugin EditorConfig no VSCode
    12 - Cria um arquivo '.editorconfig' clicando com o botão direito na
        raiz do projeto e escolhendo a opção 'Generate .editorconfig'
    13 - Cola o código abaixo no arquivo citado acima
      root = true

      [*]
      indent_style = space
      indent_size = 2
      charset = utf-8
      trim_trailing_whitespace = true
      insert_final_newline = true


Dependências adicionadas no decorrer do projeto
  # Encripitação das senhas
    > yarn add bcryptjs
  # Trabalhar com JWT (Jason Web Token)
    > yarn add jsonwebtoken
  # Validação dos dados
    > yarn add yup
  # Trabalhar com datas - @next para instalar a versão atual
    > yarn add date-fns@next


Configurando o Multer
  1 - Adiciona sua dependencias
    > yarn add Multer
  2 - Cria uma pasta 'tmp' e dentro dela outra chamada 'uploads' para armazenar
    os arquivos
  3 - Cria um arquivo de configuração 'multer.js' na pasta 'config'




Configurando o MongoDB
  1 - Subimos a imagem do MongoDB no Docker
    > docker run --name mongobarber -p 27017:27017 -d -t mongo
  2 - Adiciona a dependencia do 'mongoose' ao projeto
    > yarn add mongoose
  3 - Realiza as configurações no arquivo 'index.js' na pasta 'database'

  -> Instalar o 'MongoDB Compass' no computador para visualização dos dados numa interface

Configurando o Nodemailer
  1 - > yarn add nodemailer
  2 - Cria um arquivo 'mail.js' na pasta 'config'
  3 - Cria uma conta no serivo 'Mail Trap' para envio dos emails e adiciona os dados de usuario no arquivo citado anteriormente
  4 - Cria uma pasta 'lib' na raiz do projeto com o arquivo 'Mail.js'
  5 - Envia o email atraves do 'AppointmentController'

  => Libs para templates de email
    > yarn add express-handlebars nodemailer-express-handlebars

Configurando o Redis
  1 - Inicia no docker
    > docker run --name redisbarber -p 6379:6379 -d -t redis:alpine
  2 - Adiciona o 'bee-queue', que é uma ferramenta de fila para o node
    > yarn add bee-queue
  3 - Na pasta 'lib' cria um arquivo 'Queue.js'


Tratamento de exceções erros
  1 - Cria uma conta no 'Sentry' e cria um projeto node ou express
  2 - Faz a inicialização conforme mostra a documentação
  3 - Adiciona a lib 'express-async-errors'
    > yarn add express-async-errors
  4 - Lib para tratativa das mensagens de erro
    > yarn add youch

Configurando as variaveis ambiente
  1 - Cria o arquivo '.env' na raiz do projeto para armazenar essas informações
  2 - Adiciona ao '.gitignore'
  4 - Adiciona as variaveis ao arquivo '.env'
  5 - Adiciona a lib 'dotenv' ao projeto
    > yarn add dotenv
  6 - Faz a importação nos arquivos 'src/queue.js', 'src/app.js' e 'database.js'
    e realiza a substituição nos lugares necessários

  7 - cria um arquivo '.env.example' igual ao '.env', mas sem os valores mais sensiveis
